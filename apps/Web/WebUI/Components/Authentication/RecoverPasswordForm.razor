@namespace Web.WebUI.Components.Authentication

@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<EditForm Model="model" OnValidSubmit="HandleValidSubmit" class="space-y-4">
    <DataAnnotationsValidator />

    <div class="text-center mb-2">
        <h1 class="text-2xl font-bold text-[#1976D2]">Recuperar contraseña</h1>
        <img src="assets/logo_cuadrado_sinfondo.png" alt="logo temucomercio" class="mx-auto w-40 h-40" />
    </div>

    <ValidationSummary class="text-red-600 text-sm" />

    <!-- Selector método: Email / RUT -->
    <div class="flex gap-2 justify-center mb-3">
        <button type="button" @onclick="() => SelectMethod(Method.Email)" 
                class="px-4 py-2 rounded-lg border text-sm font-medium @(selectedMethod == Method.Email ? "bg-[#1976D2] text-white border-transparent" : "bg-white text-gray-700 border-gray-200")">
            Email
        </button>
        <button type="button" @onclick="() => SelectMethod(Method.Rut)" 
                class="px-4 py-2 rounded-lg border text-sm font-medium @(selectedMethod == Method.Rut ? "bg-[#1976D2] text-white border-transparent" : "bg-white text-gray-700 border-gray-200")">
            RUT
        </button>
    </div>

    @* Email input shown when selected *@
    @if (selectedMethod == Method.Email)
    {
        <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <!-- Envelope icon -->
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8m0 8a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h14a2 2 0 012 2v8z" />
                </svg>
            </div>
            <InputText id="email" @bind-Value="model.Email" type="email" @oninput="OnEmailInput"
                       class="w-full pl-10 pr-4 py-3 bg-gray-100 border-0 rounded-lg text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white" 
                       placeholder="Correo Electrónico" />
            @if (!string.IsNullOrEmpty(emailFormatError))
            {
                <div class="text-red-500 text-xs mt-1">@emailFormatError</div>
            }
            else
            {
                <ValidationMessage For="@(() => model.Email)" class="text-red-500 text-xs mt-1" />
            }
        </div>
    }

    @* RUT input shown when selected *@
    @if (selectedMethod == Method.Rut)
    {
        <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <!-- RUT icon (id card) -->
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM4 21v-2a4 4 0 014-4h8a4 4 0 014 4v2" />
                </svg>
            </div>
            <InputText id="rut" @bind-Value="model.Rut" 
                       class="w-full pl-10 pr-4 py-3 bg-gray-100 border-0 rounded-lg text-gray-700 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white" 
                       placeholder="RUT (ej: 12345678-9)" />
            <ValidationMessage For="@(() => model.Rut)" class="text-red-500 text-xs mt-1" />
        </div>
    }

    <button type="submit" class="w-full bg-[#1976D2] text-white py-3 rounded-lg font-medium text-lg hover:bg-[#1565C0] transition-colors duration-200">
        Recuperar contraseña
    </button>

    <div class="text-center mt-4">
        <a class="text-[#1976D2] text-sm hover:underline" href="/welcome">Volver</a>
    </div>
</EditForm>

@code {
    private RecoverModel model = new();

    // Selector de método: Email o RUT
    private Method selectedMethod = Method.Email;

    private enum Method
    {
        Email,
        Rut
    }

    private void SelectMethod(Method m)
    {
        selectedMethod = m;
    }

    private void HandleValidSubmit()
    {
        // Validar según el método seleccionado
        if (selectedMethod == Method.Email)
        {
            if (string.IsNullOrWhiteSpace(model.Email) || !IsValidEmail(model.Email))
            {
                // No enviar si email vacío o formato inválido
                emailFormatError = string.IsNullOrWhiteSpace(model.Email) ? "El correo es obligatorio" : "Formato de correo inválido (ej: usuario@dominio.com)";
                return;
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(model.Rut))
            {
                return;
            }
        }

        // Aquí iría la lógica de recuperación (no implementada)
        Navigation.NavigateTo("/login");
    }

    // Error de formato de email mostrado en tiempo real
    private string? emailFormatError;

    private void OnEmailInput(ChangeEventArgs e)
    {
        model.Email = e?.Value?.ToString();
        if (string.IsNullOrWhiteSpace(model.Email))
        {
            emailFormatError = "El correo es obligatorio";
            return;
        }

        emailFormatError = IsValidEmail(model.Email) ? null : "Formato de correo inválido (ej: usuario@dominio.com)";
    }

    private bool IsValidEmail(string? email)
    {
        if (string.IsNullOrWhiteSpace(email)) return false;
        try
        {
            // Use simple regex for live validation (covers basic cases)
            var pattern = @"^[^\s@]+@[^\s@]+\.[^\s@]+$";
            return System.Text.RegularExpressions.Regex.IsMatch(email, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        }
        catch
        {
            return false;
        }
    }

    public class RecoverModel
    {
        [Required(ErrorMessage = "El RUT es obligatorio")]
        public string? Rut { get; set; }
        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string? Email { get; set; }
    }
}
